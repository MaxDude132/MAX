-- These are comments, SQL style

-*
    This is a multiline comment

    MAX is based on the idea that it is strongly typed, but type params should only be used on code entrypoints: function parameters and external input. Everything should be clear,
    while using as little keywords as possible. No keywords exist for function or variable, only types, builtins and some required keywords will be reserved.
    Even builtins should be kept to a minimum.

    MAX code should be elegant, simple and minimal in terms of keywords. 

    All variables have to be in snake_case, functions and methods are in camelCase, classes are in PascalCase.
    Variables in CAPS will be made to be constants. Trying to change them after the fact will cause a ValueError.
    This will be enforced by the compiler.

    null does not exist in this language. If you do not know what you need yet, set a default value. Better yet, don't set anything you don't know yet.
*-

some_value = 0  -- This is fine because it can infer the type: Int
some_value = 0.0  -- Type error, cannot convert the variable from Int to Float

someFunction {  -- functions are defined without any keyword
    return 'some_value'
}

someFunctionWithParams: Int param_1, String param_2 {  -- function params must be typed. The function return cannot be typed, the type will be inferred.
    return param_1
}


someFunc: Int param_1 {
    return param_1 // 2  -- As in Python, "//" means integer division.
}

class GreatClass {  -- A class is defined by the class keyword
    init: Int some_value, Int some_value_with_default = 0 {
    }

    getSomeValue {
        return self.some_value * 2
    }

    instanceMethod {
        return self.some_value  -- me gives access to the current instance of the class.
    }

    shared classMethod {
        return cls.class_variable  -- cls gives access to the current class and the shared attributes and methods.
    }

    _restrictedMethod {  -- Method names that start with _ will be hidden from outside the class, but available to subclasses
        return ''
    }

    __privateMethod {  -- Method names that start with __ will be hidden from outside the class, including to subclasses. They will still be available through an unnamed next call.
        return ''
    }

    _some_value = 'test' -- The same logic applies to the instance attributes. Note that these are required to have a default value, as they will not appear in the initialization of the variable.
}


ClassThatInherits: GreatClass {
    classMethod {
        return super.classMethod()  -- super will always call the next parent's method. Note that this is similar to super in python, but some differences might exist.
        -- Note that simply calling super will automatically call the method of the same name. So:
        return super()
        -- would be equivalent
    }
}

-* 
    A note about inheritance:
        In Python, super calls the next class in the MRO. This has always bugged me, as it means you only know at runtime what is going to be called, not at compile time.
        In MAX, you cannot access your superclass's superclass without inheriting from it as well. For example in the classical diamond inheritance problem, the problem is traversed this way:
*-

class Shape {
    display {
        return "Shape"
    }
}

class Rectangle: Shape {
    display {
        return "Rectangle"
    }
}

class Circle: Shape {
    display {
        return "Circle
    }
}

class Cylinder: Rectangle, Circle {}

-* 
    If you look at this, you would expect a call to display() to return "Rectangle", and in this case you would be right. But if only Shape 
        defined display, then it would be unreachable to Cylinder, but reachable from Rectangle and Square. This could be fixed by adding 
        Shape to the inheritance of Cylinder.

    Inheritance does not traverse to a class's grandparents. If that is the behaviour wanted, those grandparents have to be added.
        This is done so that it is alway obvious which function will be called, and in which order the lookup will look. The only exception to 
        this rule is super. Because super always has access to its parents, the parent will still have access to its own parents, and so a 
        call coming from the child would still be brought to that child's grandparent through the super call on the parent. This is to ensure
        continuity in method calls: A call to a method will always encur the same logic and lookups, whatever the situation may be. 
*-


someFunctionWithParams(param_1=2, param_2=1)
GreatClass(some_value=2)  -- some_value = 2, some_value_with_default = 0
my_obj = GreatClass(some_value=2, some_value_with_default=1)  -- some_value = 2, some_value_with_default = 1

-- I want to have an easy way to convert a field into a property that uses getters and setters. 
--    This will probably be done by adding `get` or `set` before a method with the same name as the variable.


-- Importing should be as simple as possible and take as little space as possible. It will look like this:
file.path -> imported_function
-- A name alias can be given like so:
file.path -> imported_function => my_func
-- Multiple functions and classes can be imported in the same line:
file.path -> imported_function => my_func, ImportedClass
-- Note that you cannot import a module. You must import specifically what you need, to avoid polluting the namespace. Aliases can help avoid name collisions.


-* 
    Default Types:
        Int: integer numbers
        Float: floating point numbers
        String: multiple characters
        Bool: true or false
        List: sequence of items, doubly linked
        Map: mapping of items
        Pair: Coupling of 2 variables. Defined with -> or by calling Pair directly. This is what maps expect as arguments.
*-

-*
    Builtin functions
        iterate: Returns the object on which to call next to get the next item
        next: Returns the next item. If no item can be found, returns the sentinel NO_ITEMS, which signals to stop the loop. -- Not implemented yet
        print: Prints the String representation of the object (calling toString)
*-

*- 
    Builtin methods
        Builtin methods are what is required for classes to become usable through the default behaviour.

        To run code during object initialization:
            - init

        To make a container object:
            - iterate (returns an iterable structure, such as list or map)
            - next (makes the structure iterable, by defining the logic of which item to return. Must return a Next instance) -- Not implemented yet.

        To make comparable:
            - equals
            - greaterThan
                - Note: All other comparisons use a combination of both equals and greaterThan to determine the equality.

        To allow using operators:
            - negate: allow using the `-` operator (unary)
            - add: allow using the `+` operator
            - substract: allow using the `-` operator
            - multiply: allow using the `*` operator
            - divide: allow using the `/` operator

        To make a context manager (not implemented yet):
            - enter
            - exit
*-

-- ITERATING

-- for loops should be kept simple, and always be iterating over a container object. Container objects are objects that define the `iterate` method.

Container {
    init: List<Int> my_array {
        self.my_array = my_array
    }

    iterate {
        return iterate(self.my_array)
    }
}

container = Container(List(1, 2, 3))

for item in container {
    -- do something
}

-- Conditionals

if some_value {
    -- do something
}

-*
    Operators are:
        - == equals -> Returns a Bool
        - + plus
        - - minus
        - / divide -> Returns a float
        - // int divide -> Returns an int
        - and 
        - or
        - xor
*-

-- CONTEXT MANAGERS  -- TODO

context MyContext() -> context_obj {
    -- context_obj is available here
}

-- ENUMS

enum MyEnum {
    SOME_VALUE
    SOME_OTHER_VALUE
    SOME_VALUE_WITH_INTERNAL: Int value
    SOME_VALUE_WITH_MULTIPLE_INTERNALS: Int value, String other_value
}

-- Note: Since we do not allow passing None (or null), and to avoid people making a single Sentinel that they then use everywhere (which would defeat the purpose), 
--     we have to allow overloading functions. We should do it in a similar way to C: same function name with different parameter signature should be an overload of
--     the previous function (or method). This has the advantage of _forcing_ the coder to split things in smaller functions to avoid repeating themselves. It's a win-win.

-*
    IMPLEMENTATION IDEA
    An idea I have is to make async be part of the core of the language. For example, a for loop that does not modify any variable outside of the loop
        would run all iterations of the loop asynchronously. Similarly, function calls that do not depend on common variables would not await each other before running.
        This makes it easy to take advantage of asynchronous patterns, but means that populating a list would have 2 potential behaviour (for me to determine):
            - Because we mutate some state outside the loop, then it is not run asynchronously. In that case, there should be a way to force the async behaviour.
                This might be preferable, as it does not depend on the underlying container to properly implement an async method. It has the advantage of easily
                working with all code without any boilerplate needed.
            - Because we are not modifying the variable, but rather working on its internal structure, we still move in an async manner. This makes it potentially 
                very easy to shoot yourself in the foot. We could have a special use case for containers specifically, that says that using a function defined with an async
                parameter means that even if called in a context that would make it sync, it will still be used as async. As such, calling `append` would result in a sync
                context, but calling `append_async` would result in staying in the async context, with all its pros and cons.

    This can be visualized in this bit of code:
*-

result = List()
for item in container {  -- Here, because the add is called in the loop, each iteration will be done synchronously.
    val1 = item.val1
    val2 = item.val2  -- This attribute call will be done at the same time as the previous line, because they do not depend on one another (assuming one does not use the other in get_valx)
    val3 = val1 + val2  -- This line will await both val1 and val2, because those are its dependencies
    array.add(val3)  -- This line will await val3
}

result = array[]
for item in container {  -- Here, because the add is called with the async parameter, each iteration of the loop will be done in its own thread (not clear yet how it will be done)
    val1 = item.val1
    val2 = item.val2  -- This attribute call will be done at the same time as the previous line, because they do not depend on one another (assuming one does not use the other in get_valx)
    val3 = val1 + val2  -- This line will await both val1 and val2, because those are its dependencies
    async array.add(val3)  -- This line will await val3
}

-- This means that there will be x * 2 threads at the same time, where x is the number of items in the container that is being iterated.
-- To make sure this is safe and does not hog too much memory, we should test this idea extensively. There also needs to be a way to limit the number of threads, with a default that fits
--    the machine the code is run on. Let's also make sure that all this threading is not heavier than just running the code synchronously, in which case it should be avoided.
-- IMPORTANT: async will not be in version 1, but it's an idea to keep in mind for future improvements.
-- async loops should keep the order, so lines should be run in the same order every time. This will ensure that we keep the order as it would be expected if it was sync.
