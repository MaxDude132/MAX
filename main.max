-- These are comments, SQL style

-*
    This is a multiline comment

    MAX is based on the idea that it is strongly typed, but type params should be used as little as possible. Everything should be clear,
    while using as little keywords as possible. No keywords exist for function, class or variable, only types, builtins and some required keywords will be reserved.
    Even builtins should be kept to a minimum.

    MAX code should be elegant, simple and minimal in terms of keywords. 

    All variables have to be in snake_case, functions and methods are in camelCase, classes are in PascalCase.
    Variables in CAPS will be made to be constants. Trying to change them after the fact will cause a ValueError.
    This will be enforced by the compiler.

    null does not exist in this language. If you do not know what you need yet, set a default value.
*-

some_value = 0  -- This is fine because it can infer the type
int some_typed_value = 0  -- You can also be more precise

some_value = 0.0  -- Type becomes int | float
some_typed_value = 0.0  -- TypeError, float is not compatible with int

someFunction (  -- functions are defined by the parentheses, not a keyword
    return 'some_value'
)

someFunctionWithParams: int param_1, string param_2 (  -- function params must be typed. The function can be typed, but the type will be inferred where possible. If inferring is impossible, it will give a TypeError
    return param_1
)


someFunc: int param_1 (
    return param_1 // 2
)

GreatClass {  -- A class is defined by the brackets used
    int some_value  -- This defines a value that the class will have. This value HAS to be given when the object is instantiated.
    int some_value_with_default = 0  -- This value has a default, and so it is not required to be passed at object instantiation.
    shared int class_variable = 0  -- This is a shared variable. This means that all instances of the class will use the same variable.
    -- Note that shared attributes and methods CANNOT be accessed directly through the instance, but the cls attribute is available on the instance.

    getSomeValue (
        return me.some_value * 2
    )

    instanceMethod (
        return me.some_value  -- me gives access to the current instance of the class. If it is used in the method, the method can only be called from an instance.
    )

    classMethod (
        return cls.class_variable  -- cls gives access to the current class and the shared attributes and methods.
    )

    _restrictedMethod (  -- Method names that start with _ will be hidden from outside the class, but available to subclasses
        return ''
    )

    __privateMethod (  -- Method names that start with __ will be hidden from outside the class, including to subclasses. They will still be available through an unnamed next call.
        return ''
    )

    _some_value = 'test' -- The same logic applies to the instance attributes. Note that these are then required to have a default value, as they will not appear in the initialization of the variable.
}


ClassThatInherits: GreatClass {
    classMethod (
        return next.classMethod()  -- next will always call the next parent's method. Note that this is similar to super in python, but some differences might exist.
        -- Note that simply calling next will automatically call the method of the same name.
    )
}  -- Note that multiple inheritance is not allowed. It might be added eventually, but that will complicate the next call.


someFunctionWithParams[param_1=2, param_2=1]
GreatClass[some_value=2]  -- some_value = 2, some_value_with_default = 0
my_obj = GreatClass[some_value=2, some_value_with_default=1]  -- some_value = 2, some_value_with_default = 1
my_obj.some_value  -- my_obj.getSomeValue()
my_obj.some_value = 2  -- my_obj.setSomeValue(2)


-- Importing should be as simple as possible and take as little space as possible. It will look like this:
file.path -> imported_function
-- A name alias can be given like so:
file.path -> imported_function => my_func
-- Multiple functions and classes can be imported in the same line:
file.path -> imported_function => my_func, ImportedClass
-- Note that you cannot import a module. You must import specifically what you need, to avoid polluting the namespace. Aliases can help avoid name collisions.


-* 
    Default Types:
        int: integer numbers
        float: floating point numbers
        string: multiple characters
        boolean: true or false
        array: immutable sequence of items
        list: mutable sequence of items
*-

-*
    Builtin functions
        iterate: yields items from a container one by oen by calling the ITERATE method
        
*-

*- 
    Builtin methods
        Builtin methods are what is required for classes to become usable through the default behaviour.

        To customize the creation of new instance:
            - new

        To run code during object initialization:
            - init

        To make a container object:
            - iterate

        To make comparable:
            - equals
            - greaterThan
*-

-- ITERATING

-- for loops should be kept simple, and always be iterating over a container object. Container objects are objects that define the `iterate` method.

Container {
    array<int> my_array

    iterate (
        return iterate[me.my_array]
    )
}

container = Container[array[1, 2, 3]]

for item in container {
    -- do something
}

-- Conditionals

if some_value {
    -- do something
}

-*
    Operators are:
        - == equals -> Returns a bool
        - + plus -> Returns an int, float or string
        - - minus -> Returns an in or float
        - / divide -> Returns a float
        - // int divide -> Returns an int
        - and 
        - or
        - xor
*-

-- Note: Since we do not allow passing None (or null), and to avoid people making a single Sentinel that they then use everywhere (which would defeat the purpose), 
--     we have to allow overloading functions. We should do it in a similar way to C: same function name with different parameter signature should be an overload of
--     the previous function (or method). This has the advantage of _forcing_ the coder to split things in smaller functions to avoid repeating themselves. It's a win-win.

-*
    An idea I have is to make async be part of the core of the language. For example, a for loop that does not modify any variable outside of the loop
        would run all iterations of the loop asynchronously. Similarly, function calls that do not depend on common variables would not await each other before running.
        This makes it easy to take advantage of asynchronous patterns, but means that populating a list would have 2 potential behaviour (for me to determine):
            - Because we mutate some state outside the loop, then it is not run asynchronously. In that case, there should be a way to force the async behaviour.
                This might be preferable, as it does not depend on the underlying container to properly implement an async method. It has the advantage of easily
                working with all code without any boilerplate needed.
            - Because we are not modifying the variable, but rather working on its internal structure, we still move in an async manner. This makes it potentially 
                very easy to shoot yourself in the foot. We could have a special use case for containers specifically, that says that using a function defined with an async
                parameter means that even if called in a context that would make it sync, it will still be used as async. As such, calling `append` would result in a sync
                context, but calling `append_async` would result in staying in the async context, with all its pros and cons.
*-
